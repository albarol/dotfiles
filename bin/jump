#!/usr/bin/env bash

GREEN="\e[32m"
RED="\e[31m"
DIM="\e[2m"
BOLD="\e[1m"
NC="\e[0m"


if [[ -z $MARK_PATH ]]; then
    export MARK_PATH=~/.marks
fi

message_help() {
printf  "\
\$ jump [comand] [arguments]

${BOLD}Usage:${NC}
 jump ${GREEN}mark${NC} <name> <path>
 jump ${GREEN}unmark${NC} <name>
 jump ${GREEN}marks${NC}
 jump ${GREEN}clear${NC}

${BOLD}Commands:${NC}
 ${GREEN}mark${NC}      Create a mark for a path.
 ${GREEN}unmark${NC}    Remove the mark for a path.
 ${GREEN}marks${NC}     Show all marks.
 ${GREEN}clear${NC}     Clear all marks.

${BOLD}Options:${NC}
${GREEN}--h${NC}elp     Display this help.
"
}

process_mark() {
    if [[ "$#" -ne 2 ]]; then
        printf "${RED}Usage: mark <name> <path>${NC}\n"
        exit 1
    fi

    local HAS_MARK=$(grep "$1=" $MARK_PATH)

    if [[ -n $HAS_MARK ]]; then
        printf "${RED}Mark ${BOLD}$1${NC} already exists.${NC}\n"
        exit 1
    fi

    local NEW_PATH=$(cd $2 2> /dev/null && pwd -P)
    printf "$1=$NEW_PATH\n" >> $MARK_PATH
    exit 0
}


process_get() {
    if [[ "$#" -ne 1 ]]; then
        exit 1
    fi

    local HAS_MARK=$(grep "$1=" $MARK_PATH)

    if [[ -z $HAS_MARK ]]; then
        exit 1
    fi

    printf "$HAS_MARK" | awk -F'=' '{print $2}'

    exit 0
}

process_unmark() {
    if [[ "$#" -ne 1 ]]; then
        printf "${RED}Usage: unmark <name>${NC}\n"
        exit 1
    fi

    local HAS_MARK=$(grep "$1=" $MARK_PATH)

    if [[ -z $HAS_MARK ]]; then
        printf "${RED}Mark $1 not found.${NC}\n"
        exit 1
    fi

    local TMP=/tmp/$(uuidgen).tmp

    grep -v "$1=" $MARK_PATH > $TMP
    mv $TMP $MARK_PATH

    exit 0
}

process_marks() {
    cat $MARK_PATH
}

process_clear() {
    printf "" > $MARK_PATH
}

process_commands() {
    local cmd=$1
    shift

    case $cmd in
        mark) process_mark $@;;
        unmark) process_unmark $@;;
        _get) process_get $@;;
        marks) process_marks;;
        clear) process_clear;;
        *) message_help;;
    esac
}


if [[ "${@:-1}" = "--help" ]] && [[ "$#" -eq 1 ]]; then
    message_help && exit 0
elif [[ "$#" -ge 1 ]]; then
    process_commands $@
else
    message_help && exit 0
fi

