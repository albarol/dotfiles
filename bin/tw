#!/usr/bin/env bash

GREEN="\e[32m"
RED="\e[31m"
DIM="\e[2m"
BOLD="\e[1m"
NC="\e[0m"

TASK_PATH=$HOME/.task
POMODORO_PLUGIN=$HOME/.tmux/plugins/tmux-pomodoro/scripts/tmux_pomodoro.sh

__slugify() {
  echo "$@" | iconv -t ascii//TRANSLIT | sed -r s/[~\^]+//g | sed -r s/[^a-zA-Z0-9]+/-/g | sed -r s/^-+\|-+$//g | tr A-Z a-z
}

message_help() {
printf  "\
\$ tw [comand] [arguments]

${BOLD}Usage:${NC}
 tw ${GREEN}timer${NC}     <ID>
 tw ${GREEN}stop${NC}
 tw ${GREEN}notebook${NC}  (uuid | id)
 tw ${GREEN}notebooks${NC}
 tw ${GREEN}dashboard${NC}
 tw ${GREEN}backlog${NC}
 tw ${GREEN}sync${NC}

${BOLD}Commands:${NC}
 ${GREEN}timer${NC}       Starts a pomodoro for a task.
 ${GREEN}notebook${NC}    Return a notebook for a given.
 ${GREEN}notebooks${NC}   Show all notebooks.
 ${GREEN}backlog${NC}     Return the backlog of tasks.
 ${GREEN}stop${NC}        Stop current running task.
 ${GREEN}dashboard${NC}   Toggle dashboard.
 ${GREEN}sync${NC}        Sync all tasks.

${BOLD}Options:${NC}
${GREEN}--h${NC}elp     Display this help.
"
}

process_timer() {
    if [[ "$#" -lt 1 ]]; then
        printf "${RED}Usage: tw timer 5${NC}\n"
        exit 1
    fi

    task $1 start &> /dev/null

    if [[ $? -ne 0 ]]; then
        notify-send "Twtimer" "Task not available." --icon=dialog-error --urgency=normal
        exit 1
    elif [[ -z "$TMUX" ]]; then
        notify-send "Twtimer" "It only works with tmux" --icon-dialog=error --urgency=normal
        exit 1
    fi

    notify-send "Twtimer" "Starting task $1" --urgency=normal
    tmux run-shell "$POMODORO_PLUGIN start"
}

process_notebook() {
    if [ "$#" -ne 1 ]; then
        printf "${RED}Usage: tw notebook (uuid | id)${NC}\n"
        exit 1
    fi

    local info=$(task info $1 |awk '{if($1 == "UUID") print $2}'| tr -d -)
    if [[ -z "$info" ]]; then
        printf "${RED}Usage: tw notebook (uuid | id)${NC}\n"
        exit 1
    fi

    local filename=$(grep -l "$info" -R $TASK_PATH/info)
    if [[ ! -f "$filename" ]]; then
        printf "${RED}There is no notebook created for $1 ${NC}\n"
        read -r -p "Please insert notebook filename: " input

        filename="$TASK_PATH/info/$(__slugify $input).md"
        echo "[comment]: # task: $info"$'\n\n'"# $input" > $filename
    fi

    vim $filename
}

process_notebooks() {
    local NAME
    NAME=$(find "$TASK_PATH/info" -type f | fzf --preview 'head -100 {}')

    if [[ -n "$NAME" ]]; then
        vim $NAME
    fi
}

process_backlog() {
    vim $TASK_PATH/product.backlog
}

process_stop() {
    local current=$(task active |awk 'NR==4 {print $1}')

    if [[ ! -z $current ]]; then
      task $current stop

      if [[ ! -z "$TMUX" ]]; then
          tmux run-shell "$POMODORO_PLUGIN stop"
      fi

    fi
}

process_dashboard() {
    local processes=$(ps u|grep "tmux -2 attach-session -t twdashboard"|wc -l)

    if [[ "$processes" = "1" ]]; then
	# initialize a tmux session
	tmux new-session -d -s twdashboard -n twindow

	# shows burndown dashboard
	tmux send-keys -t twdashboard:twindow.0 'task burndown.daily' C-j

	# shows calendar
	tmux split-window -h
	tmux send-keys -t 1 'task calendar' C-j

	# shows summary
	tmux split-window -v
	tmux send-keys -t 2 'task ghistory' C-j

	# attach to current window
	tmux -2 attach-session -t twdashboard
    else
	tmux kill-session -t twdashboard
    fi
}

process_sync() {
  cd $TASK_PATH

  local SYNCED_MESSAGE="[Sync] Tasks synced at $(date '+%Y-%m-%d %H:%M')"
  local MSG_COMMIT="$SYNCED_MESSAGE"

  if [[ -n "$1" ]]; then
    MSG_COMMIT=$1
  fi

  if [[ -n $(git status --porcelain) ]]; then
    git add --all
    git commit -m "$MSG_COMMIT" &> /dev/null
  fi
  git pull origin master &> /dev/null
  git push origin master &> /dev/null
  echo $SYNCED_MESSAGE
}

process_commands() {
  local cmd=$1
  shift

  case $cmd in
    timer) process_timer $@;;
    stop) process_stop;;
    n|notebook) process_notebook $@;;
    notebooks) process_notebooks;;
    backlog) process_backlog;;
    dashboard) process_dashboard;;
    sync) process_sync $@;;
    --help|help) message_help;;
    *) task $cmd $@;;
  esac
}


if [[ "${@:-1}" = "--help" ]] && [[ "$#" -eq 1 ]]; then
    message_help && exit 0
elif [[ "$#" -ge 1 ]]; then
    process_commands $@
else
    message_help && exit 0
fi

